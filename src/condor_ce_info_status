#!/usr/bin/python

FALLBACK_COLLECTOR = 'collector.opensciencegrid.org'
FALLBACK_COLLECTOR_PORT = 9619

import os
import sys
import optparse
import itertools

os.environ.setdefault("CONDOR_CONFIG", "/etc/condor-ce/condor_config")

import classad
import htcondor

import condor_ce_info_query as info_query


def formatResourceAdsTable(resources, width):
    """Create a table of resource information obtained from `resources`,
    formatted in a text block `width` characters wide. Returns the table
    as a string

    """
    if width < 50:
        width = 50
    cpus_width = 4
    memory_width = 8
    max_wall_time_width = 12

    remaining_width = width - cpus_width - memory_width - max_wall_time_width
    name_width = remaining_width * 2 // 5
    allowed_vos_width = remaining_width - name_width

    format_str = ("%%-%(name_width)d.%(name_width)ds "
                  "%%%(cpus_width)ds "
                  "%%%(memory_width)ds "
                  "%%%(max_wall_time_width)ds "
                  "%%-.%(allowed_vos_width)ds" % locals())
    table = format_str % ("Name",
                          "CPUs",
                          "Memory",
                          "MaxWallTime",
                          "AllowedVOs")
    table += "\n"
    for resource in resources:
        catalog_entry = resource.catalog_entry
        table += "\n" + format_str % (catalog_entry['Name'],
                                      catalog_entry['CPUs'],
                                      catalog_entry['Memory'],
                                      catalog_entry.get('MaxWallTime', ''),
                                      ", ".join(list(catalog_entry.get('AllowedVOs', []))))

    return table


def parseOpts(argv):
    """Parse command-line options and arguments.
    Returns the options and the address of the collector to contact

    """
    usage = "%prog [options] [<collector hostname>[:port]]"
    epilog = '''

Here are some example queries.
To list resources that provide at least 1 GB of memory and are accessible
by the 'osg' VO:

    %(prog)s  --memory 1024  --vo osg

which results in:

    Name                   CPUs   Memory  MaxWallTime AllowedVOs

    matyasfermicloud085       1     1877         1440 fermi, osg

To list resources that have a MaxWallTime of at least 1 day (1440 minutes):

    %(prog)s  --walltime 1440

To print a full classad containing resource attributes and some attributes
from the CE containing the resource:

    %(prog)s  --walltime 1440  --verbose

which results in:

        [
            OSG_BatchSystems = "Condor";
            Name = "matyasfermicloud085";
            MaxWallTime = 1440;
            CPUs = 1;
            Memory = 1877;
            ...
        ]

''' % {'prog': os.path.basename(argv[0])}

    try:
        parser = optparse.OptionParser(usage=usage, epilog=epilog)
        # Don't reformat the epilog string (https://stackoverflow.com/questions/1857346)
        optparse.OptionParser.format_epilog = lambda self, formatter: self.epilog
    except TypeError:
        # Python 2.4 does not have epilog so append epilog onto usage
        usage += "\n" + epilog
        parser = optparse.OptionParser(usage=usage)
        # Don't reformat the usage string (https://stackoverflow.com/questions/1857346)
        optparse.OptionParser.format_usage = lambda self, formatter: self.usage

    parser.add_option("--cpus", default=1, type='int',
                      help="CPUs requested")
    parser.add_option("--memory", default=1, type='int',
                      help="Memory requested (in megabytes)")
    parser.add_option("--walltime", default=0, type='int',
                      help="Walltime requested (in minutes)")
    parser.add_option("--vo", default=None,
                      help="VO membership")
    parser.add_option("--width", default=os.environ.get('COLUMNS', 80), type='int',
                      help="Output width for table")
    parser.add_option("--pool", default=None, metavar='ADDRESS',
                      help="Collector to get information from")
    parser.add_option("-v", "--verbose", "-l", "--long", dest='verbose', default=False, action='store_true',
                      help="Show matching classads instead of a table")
    parser.add_option("-d", "--debug", default=False, action='store_true',
                      help="Show debug output")

    opts = parser.parse_args(argv[1:])[0]

    if opts.debug:
        htcondor.enable_debug()
    global g_debug
    g_debug = opts.debug

    if opts.pool:
        collector = opts.pool
    else:
        collector = htcondor.param.get('CONDOR_CE_COLLECTOR_HOST', FALLBACK_COLLECTOR)
    if ':' not in collector:
        collector_port = htcondor.param.get('COLLECTOR_PORT', FALLBACK_COLLECTOR_PORT)
        collector += ":" + str(collector_port)

    return opts, collector


def main(argv):
    """Main function.

    Get a list of ResourceAd objects filled with data from querying a
    collector; pass the list through a series of filters and either
    display the remaining resource ads in full, or create a table
    from the resource ads and display that.

    """

    opts, collector_addr = parseOpts(argv)

    constraints = {}
    for key in ['cpus', 'memory', 'vo', 'walltime']:
        try:
            constraints[key] = getattr(opts, key)
        except AttributeError:
            pass

    ce_ads = info_query.fetchCEAds(collector_addr)
    resources = info_query.filterResourceAds(constraints, info_query.getResourceAdsIter(ce_ads))

    if opts.verbose:
        for res in resources:
            print res
    else:
        print formatResourceAdsTable(resources, opts.width)



if __name__ == '__main__':
    sys.exit(main(sys.argv))
